# Defines a list of message groups to subscribe to. The default is usually
# given by the application and does not need to be changed.
connection.subscriptions = PICK, EVENT, QC

# Specified the location and the structure of the map tiles to be used. This
# path is composed of zero or more directives and must include at least one
# conversion specification which starts with is introduced by the character %
# followed by a conversion specifier. Valid specifiers are s (replaced by tile
# ID), l (tile level), c (tile column) and r (tile row). An example for using
# the OpenStreetMap file structure is /path/to/maps/%l/%c/%r.png.
map.location = /home/data/maps/world-10.mbtiles

# Allows to bind sockets to privileged ports (<1024).
authbind = false

# IP and port to bind the HTTP server to. Use 0.0.0.0 to bind to all
# interfaces. Either the port or the IP address may be omitted, e.g., "0.0.0.0"
# or ":1234". If set to an empty string the application will run without
# providing a HTTP server.
bind = 127.0.0.1:8080

# IP and port to bind the HTTPS server to. Use 0.0.0.0 to bind to all
# interfaces. Either the port or the IP address may be omitted, e.g., "0.0.0.0"
# or ":1234". If set to an empty string the application will run without
# providing a HTTPS server.
sbind = 127.0.0.1:-1

# Whether to run offline (no messaging connection) or online (messaging
# connection). In offline mode either the database connection or the inventory
# and config XML files must be provided.
offline = false

# Enable ground motion computation. If set to false then no ground motion
# amplitudes are being computed.
computePGAVD = true

# Time window in seconds used to compute ground motion amplitudes. The higher
# the time window the less amplitudes will be computed over time.
windowPGAVD = 10

# Defines the users file for access control. The user file contains one line
# per user where each line is of format "username:encrypted_pwd". To encrypt a
# password mkpasswd can be used. It is recommended to apply a strong algorithm
# such as sha-256 or sha-512. E.g., the command "user=sysop pw=`mkpasswd -m
# sha-512` && echo $user:$pw" would generate a line for the user "sysop".
users = @CONFIGDIR@/gaps/users

# Defines the file used to read user properties. Each line contains the user
# name and a list of properties in format "username:prop1,prop2,prop3". Those
# properties are used to grant access to certain functionalities in gaps such
# as sending processing results back. There is currently only one property
# which is interpreted by GAPS: "staff".
userProperties = @CONFIGDIR@/gaps/access

# Enables HTTP access logging to @LOGDIR@/gaps-http-access. Log files are
# created for 24h and kept for 7 days using log rotation.
accessLog = false

# Path to the template that generated index.html.
indexTemplate = @DATADIR@/gaps/index.cs

# Path to media files (index.html, .css, .js, .png, ...) served by GAPS.
mediaDirectory = @DATADIR@/gaps/apps

# Minimum buffer size in bytes per acquisition thread.
bufferSize = 65536

# Maximum number of acquisition threads. This corresponds to the maximum number
# of parallel acquisition requests from clients.
maximumThreads = 10

# Thread request timeout. If data of a thread has not been requested for more
# than n seconds the thread will be closed and finished.
requestTimeout = 10

# Disables usage of WebSocket protocol. Useful, if traffic is tunneled through
# a web server that cannot handle WebSockets.
forceHTTP = false

# The QuakeLink event request URI. This is used as a default for all web
# applications.
quakelink = http://localhost:18080/events/query

# The QuakeLink proxy connection initiated by GAPS to convert and forward
# single events from QuakeLink to the browser. Required since QuakeLink
# delivers only XML format but JSON format is needed.
quakelinkProxy = ql://localhost:18010

# Path to SSL certificate file
SSL.certificate = ""

# Path to SSL private key file
SSL.key = ""

# Full URL for tiles, e.g., "http://example.com:8080/tiles/{z}/{y}/{x}". The
# tile server URL for all applications.
apps.mapURI = ../tiles/{z}/{y}/{x}

# Maximum zoom number for which the tiles source has available. The tiles on
# all zoom levels higher than mapMaxLevel will be loaded from mapMaxLevel level
# and auto-scaled.
apps.mapMaxLevel = 10

# Maximum allowed zoom level in the interactive map.
apps.mapMaxZoom = 14

# Whether to show a zoom control on the map.
apps.mapShowZoomControl = false

# Path of the server API for all applications. This parameter can be overridden
# in each application.
apps.serverAPI = "../"

# Relative path to a logo (brand) image shown in web applications. Give path
# relative to SEISCOMP_ROOT/share/gaps/apps. The image is scaled to the field
# dimension 157px x 38px preserving the aspect ratio.
apps.logoPath = share/images/gempa_logo.svg

# Whether to derive event symbol colors from event depth or from event age with
# respect to current time.
apps.colorEventsByAge = false

# If event symbol colors are derived from the event age then the age must be
# recomputed at a certain interval. This number defines the interval in seconds
# to update the event colors. The lower the interval the more often the colors
# must be updated which can decrease performance.
apps.colorEventsUpdateInterval = 60

# The minimum latitude of the region.
apps.mapRegion.minimumLatitude = -90

# The minimum longitude of the region.
apps.mapRegion.minimumLongitude = -225

# The maximum latitude of the region.
apps.mapRegion.maximumLatitude = 90

# The maximum longitude of the region.
apps.mapRegion.maximumLongitude = 225

# On startup set central map to initial region (mapRegion.*).
apps.eqview.showRegion = false

# Shows the initial region rectangle (mapRegion.*) in the central map.
apps.eqview.showRegionBounds = false

# Shows the selected widget region rectangle in the central map. This setting
# replaces the region rectangle (showRegionBounds) if both are set to true.
apps.eqview.showWidgetBounds = false

# Shows the spreading of P/S wave in the center-widget.
apps.eqview.showWaveSpreading = false

# Whether map will center around the latest event or not.
apps.eqview.centerLatestEvent = true

# Show UTC time in the front end.
apps.eqview.useUTC = false

# If enabled then all waveforms of an event will be requested even if stations
# are not part of the local inventory. If disabled then only stations are
# allowed that are configured locally with bindings.
apps.eqview.externalData = true

# The minimum population of a city to be taken into account as nearest city to
# an event.
apps.eqview.nearestCityMinPopulation = 100000

# The maximum distance of the nearest city from an event.
apps.eqview.nearestCityMaxDistance = 20

# Whether to show the latest event in the top left corner of the widget which
# is currently active as main widget.
apps.eqview.showLatestMainEvent = true

# Whether to show the latest overall event of all widgets. It will be shown in
# the top right corner above the widgets.
apps.eqview.showLatestOverallEvent = false

# The time span for which the latest overall event will be selected.
apps.eqview.overallTimeSpan = false

# Defines the available widgets. The first widget listed is taken as primary
# widget.
apps.eqview.widgets = world

# The widget title as it appears in the widgets title bar.
apps.eqview.widget.world.title = World

# The minimum latitude of the region.
apps.eqview.widget.world.minimumLatitude = -90

# The minimum longitude of the region.
apps.eqview.widget.world.minimumLongitude = -180

# The maximum latitude of the region.
apps.eqview.widget.world.maximumLatitude = 90

# The maximum longitude of the region.
apps.eqview.widget.world.maximumLongitude = 180

# The time span to be shown in hours.
apps.eqview.widget.world.timeSpan = 120

# The minimum magnitude to be shown.
apps.eqview.widget.world.minimumMagnitude = 5.0

# Event status code list that is accepted. Each item is a character (A,M,...)
# that maps to the type code in the QuakeLink summary format. To exclude types,
# a minus can be prepended to each code, e.g., "-X". That would accept all
# solutions except rejected. An empty list accepts everything.
apps.eqview.widget.world.status = ""

# The pre-offset of the traces with respect to the onset.
apps.eqview.widget.world.tracePreOffset = 2.0

# The post-offset of the traces with respect to the onset.
apps.eqview.widget.world.tracePostOffset = 5.0

# Configures whether traces are aligned on first picked onset or on theoretical
# arrivals.
apps.eqview.widget.world.alignOnPredicatedArrivals = false

# Configures if picks are shown in the waveforms.
apps.eqview.widget.world.showPicks = false

# Whether to give visual feedback if a new event has been set as latest in the
# widget. If enabled then the widget shakes for a short time when the latest
# event updates.
apps.eqview.widget.world.visualFeedback = false

# Path to an audio file played when adding a new event to the widget. The audio
# file is played when the event is the most recent one. For older events the
# audio alert is not played. Give path relative to
# $SEISCOMP_ROOT/share/gaps/apps, e.g., share/audio/alert.mp3. Preferred
# format: MP3.
apps.eqview.widget.world.audioFilePath = ""

# The list of filters available in TraceView, format per item is
# "name;filter-string".
apps.traceview.filters = "0.7Hz - 2Hz;RMHP(10)>>ITAPER(30)>>BW(3,0.7,2.0)",\
   "1Hz - 3Hz;RMHP(5)>>ITAPER(10)>>BW(3,1,3)",\
   "2Hz - 4Hz;RMHP(5)>>ITAPER(10)>>BW(3,2,4)",\
   "4Hz - 8Hz;RMHP(5)>>ITAPER(10)>>BW(3,4,8)",\
   "HP 3 Hz;RMHP(1)>>ITAPER(2)>>BW_HP(3,3)"

# Forces to use HTTP instead of WebSocket protocol for trace transport. This
# can be important when tunneling GAPS through Apache where WebSockets are not
# well supported.
apps.traceview.forceHTTP = false

# Timespan for trace display. The default is 10min.
apps.traceview.timeSpan = 600

# Defines the default MapView mode that is used to color the station symbols.
# Valid values are "delay", "latency" and "groundmotion".
apps.mapview.mode = delay

# Defines whether the station symbols should be clustered by default or not.
apps.mapview.cluster = true

# Defines an additional link that is rendered on the station detail page. It
# supports two placeholders: ${net} and ${sta} which are replaced during
# runtime.
apps.mapview.customStationLink = ""

# The name as displayed on the station panel for the custom station link.
apps.mapview.customStationLinkName = ""

# If enabled then the map will be centered around the clients geolocation
# (fetched via web service from www.geoplugin.net).
apps.mapview.fetchGeoIP = false

# Number of days to preload if scolv is started.
apps.scolv.loadEventDB = 1

# Show UTC time in the frontend.
apps.scolv.useUTC = true

# Show distances in km instead of degree.
apps.scolv.distInKM = false

# The list of active travel time table interfaces.
apps.scolv.ttt = libtau, LOCSAT

# List of filters available in the picker. If @ is prepended to the name of the
# filter it will be selected as default filter. The format of each entry is
# "name;definition", e.g., "BP 0.7 - 2 Hz 3rd order;BW(3,0.7,2)"
apps.scolv.picker.filters = "@0.7Hz - 2Hz;RMHP(10)>>ITAPER(30)>>BW(3,0.7,2.0)",\
   "1Hz - 3Hz;RMHP(5)>>ITAPER(10)>>BW(3,1,3)",\
   "2Hz - 4Hz;RMHP(5)>>ITAPER(10)>>BW(3,2,4)",\
   "4Hz - 8Hz;RMHP(5)>>ITAPER(10)>>BW(3,4,8)",\
   "HP 3 Hz;RMHP(1)>>ITAPER(2)>>BW_HP(3,3)"

# List of phases enabled for picking.
apps.scolv.picker.phases = P, Pn, Pg, pP, S, Sg, sP

# Begin of time window before origin time to load waveforms when the picker is
# opened.
apps.scolv.picker.preOffset = 300

# End of time window after origin time to load waveforms when the picker is
# opened.
apps.scolv.picker.postOffset = 600

# The default time window shown before the trace alignment. Alignment is set
# interactively by origin time or P- or S-phase arrival.
apps.scolv.picker.preAlign = 30

# The default time window shown after the trace alignment. Alignment is set
# interactively by origin time or P- or S-phase arrival.
apps.scolv.picker.postAlign = 90

# The list of supported model names per interface.
apps.scolv.ttt.LOCSAT.models = iasp91, tab

# The list of supported model names per interface.
apps.scolv.ttt.libtau.models = iasp91, ak135

# The station symbol shape. Valid values are: hexagon, triangle and diamond
scheme.map.stationShape = hexagon

# The station symbol size in pixels
scheme.map.stationSize = 25

# Default magnitude color gradient if color mode is "magnitude"
scheme.colors.originSymbol.magnitude.gradient = 0:83c3f0:"< 2",\
                                                2:4285af,\
                                                3:6ab69c,\
                                                4:a3cf9a,\
                                                5:eccf8c,\
                                                6:e6ae6e,\
                                                7:db765a,\
                                                8:c05065


# Default values for various precisions
scheme.map.precision.depth = 0
scheme.map.precision.distance = 1
scheme.map.precision.location = 1
scheme.map.precision.magnitude = 1
scheme.map.precision.originTime = 0
scheme.map.precision.pickTime = 1
scheme.map.precision.traceValues = 1
scheme.map.precision.rms = 1
scheme.map.precision.uncertainties = 1
